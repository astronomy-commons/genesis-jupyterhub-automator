#!/bin/bash

set -e
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
cd "$DIR/.."

[[ -z "$CERTBOT_VALIDATION" ]] && { echo "error: this script is designed to run through 'certbot ... --manual-auth-hook=$0' (\$CERTBOT_VALIDATION is not set)."; exit -1; }
[[ -z "$CERTBOT_DOMAIN" ]] && { echo "error: this script is designed to run through 'certbot ... --manual-auth-hook=$0' (\$CERTBOT_DOMAIN is not set)."; exit -1; }

# CERTBOT_DOMAIN = aas.dirac.institute
HOST=_acme-challenge.$(echo "$CERTBOT_DOMAIN" | cut -d . -f 1)
DOMAIN=$(echo "$CERTBOT_DOMAIN" | cut -d . -f 2-)

hosted_zone_id=$(aws --output=json route53 list-hosted-zones | jq --arg DOMAIN "${DOMAIN}." ' .HostedZones | .[] | select(.Name==$DOMAIN) | .Id ')
# remove trailing / preceeding quotes
hosted_zone_id="${hosted_zone_id%\"}"
hosted_zone_id="${hosted_zone_id#\"}"

record_dns_name="${HOST}.${DOMAIN}"

resources=$(aws --output=json route53 list-resource-record-sets --hosted-zone-id $hosted_zone_id)
host_txt_record=$(echo "$resources" | jq --arg record_dns_name "${record_dns_name}." ' .ResourceRecordSets | .[] | select(.Name==$record_dns_name and .Type=="TXT")')

if [[ $host_txt_record ]]; then
	name=$(echo "$host_txt_record" | jq '.Name')
	type=$(echo "$host_txt_record" | jq '.Type')
	ttl=$(echo "$host_txt_record" | jq '.TTL')
	resource_records=$(echo "$host_txt_record" | jq '.ResourceRecords')

	delete_request=$(cat <<-EOF
		{
			"Comment": "Add certbot validation TXT",   
			"Changes": [
				{
					"Action": "DELETE",
					"ResourceRecordSet": {
						"Name": $name,
						"Type": $type,
						"TTL": $ttl,
						"ResourceRecords": $resource_records
					}
				}
			]
		}
	EOF
	)
	response=$(aws --output=json route53 change-resource-record-sets --hosted-zone-id $hosted_zone_id --change-batch "$delete_request")
	[[ $response ]] || { echo "Error sending record delete request to Route 53..." 1>&2; exit -1; }
fi

create_request=$(cat <<-EOF
	{
		"Comment": "Add certbot validation TXT",   
		"Changes": [
			{
				"Action": "CREATE",
				"ResourceRecordSet": {
					"Name": "${HOST}.${DOMAIN}",
					"Type": "TXT",
					"TTL": 1,
					"ResourceRecords": [{
						"Value" : "\"$CERTBOT_VALIDATION\""
					}]
				}
			}
		]
	}
	EOF
)
response=$(aws --output=json route53 change-resource-record-sets --hosted-zone-id $hosted_zone_id --change-batch "$create_request")
[[ $response ]] || { echo "Error sending record create request to Route 53..." 1>&2; exit -1; }

change_id=$(echo "$response" | jq -r ' .ChangeInfo.Id ')
status=$(aws route53 get-change --id $change_id | jq -r ' .ChangeInfo.Status' )

hdr=
while [[ $status != "INSYNC" ]]; do
	change_id=$(echo "$response" | jq -r ' .ChangeInfo.Id ')
	status=$(aws route53 get-change --id $change_id | jq -r ' .ChangeInfo.Status' )
	if [[ -z $hdr ]]; then
		echo -n "Waiting for TXT record change to propogate..."
		hdr=1
	else
		echo -n "."
	fi
	sleep 1
done